import{_ as t,a as d,o as e,ab as o}from"./chunks/framework.uTkN8JXe.js";const m=JSON.parse('{"title":"MessageBox","description":"MessageBox 组件文档","frontmatter":{"title":"MessageBox","description":"MessageBox 组件文档","next":{"link":"/components/notification","text":"Notification 通知"},"prev":{"link":"/components/message","text":"Message 消息提示"}},"headers":[],"relativePath":"components/messagebox.md","filePath":"components/messagebox.md"}'),a={name:"components/messagebox.md"},s=o('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>🚧 组件库更新通知 🚧</strong>：我们正在努力完善我们的组件库。</p></div><h1 id="messagebox-消息弹框" tabindex="-1">MessageBox 消息弹框 <a class="header-anchor" href="#messagebox-消息弹框" aria-label="Permalink to &quot;MessageBox 消息弹框&quot;">​</a></h1><p>模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>从设计上来说，MessageBox 的作用是美化系统自带的 alert、confirm 和 prompt，因此适合展示较为简单的内容。</p></div><h2 id="消息提示" tabindex="-1">消息提示 <a class="header-anchor" href="#消息提示" aria-label="Permalink to &quot;消息提示&quot;">​</a></h2><p>调用 <code>kawaMessageBox.alert</code> 方法以打开 alert 框。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="确认消息" tabindex="-1">确认消息 <a class="header-anchor" href="#确认消息" aria-label="Permalink to &quot;确认消息&quot;">​</a></h2><p>调用 <code>kawaMessageBox.confirm</code> 方法以打开 confirm 框。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="提交内容" tabindex="-1">提交内容 <a class="header-anchor" href="#提交内容" aria-label="Permalink to &quot;提交内容&quot;">​</a></h2><p>调用 <code>kawaMessageBox.prompt</code> 方法以打开 prompt 框。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="使用-vnode" tabindex="-1">使用 VNode <a class="header-anchor" href="#使用-vnode" aria-label="Permalink to &quot;使用 VNode&quot;">​</a></h2><p><code>message</code> 可以是 VNode。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="个性化" tabindex="-1">个性化 <a class="header-anchor" href="#个性化" aria-label="Permalink to &quot;个性化&quot;">​</a></h2><p>可以通过配置 <code>kawaMessageBox</code> 的参数来实现一些个性化需求（options 参数见下文）。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="内容居中" tabindex="-1">内容居中 <a class="header-anchor" href="#内容居中" aria-label="Permalink to &quot;内容居中&quot;">​</a></h2><p>消息弹框支持使用居中布局。</p><p><code>center</code> 参数为 <code>true</code> 时，消息弹框内容会居中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🔨 <strong>施工中</strong>：我们的团队正在全力以赴，以确保为您提供最高质量的组件。请稍后再来查看这些组件的最新进展。</p></div><h2 id="全局方法" tabindex="-1">全局方法 <a class="header-anchor" href="#全局方法" aria-label="Permalink to &quot;全局方法&quot;">​</a></h2><p><code>kawaMessageBox</code> 提供了全局方法 <code>kawaMessageBox.alert</code>、<code>kawaMessageBox.confirm</code>、<code>kawaMessageBox.prompt</code>，用于在需要时弹出消息弹框。 如果完整引入了 <code>kawaUI</code>, 则会为 <code>app.config.globalProperties</code> 添加全局方法 <code>$msgbox</code>、<code>$alert</code>、<code>$confirm</code>、<code>$prompt</code>。 在 Vue 实例中可以作为 <code>this.$msgbox</code>、<code>this.$alert</code>、<code>this.$confirm</code>、<code>this.$prompt</code> 使用。</p><h2 id="单独引用" tabindex="-1">单独引用 <a class="header-anchor" href="#单独引用" aria-label="Permalink to &quot;单独引用&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { kawaMessageBox } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kawa-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="messagebox-api" tabindex="-1">MessageBox API <a class="header-anchor" href="#messagebox-api" aria-label="Permalink to &quot;MessageBox API&quot;">​</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><table><thead><tr><th>Name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>title</td><td>MessageBox 标题</td><td><code>string</code></td><td>--</td></tr><tr><td>message</td><td>MessageBox 消息正文内容</td><td><code>string | VNode | () =&gt; VNode</code></td><td>--</td></tr><tr><td>type</td><td>MessageBox 类型,用于图标展示</td><td><code>enum</code> - <code>&#39;success&#39; | &#39;warning&#39; | &#39;info&#39; | &#39;error&#39; |&#39;danger&#39;</code></td><td>--</td></tr><tr><td>icon</td><td>MessageBox 图标</td><td><code>string</code></td><td>--</td></tr><tr><td>callback</td><td>MessageBox 关闭回调函数</td><td><code>(action: MessageBoxAction) =&gt; void</code></td><td>--</td></tr><tr><td>show-close</td><td>是否显示关闭按钮</td><td><code>boolean</code></td><td>true</td></tr><tr><td>before-close</td><td>关闭前的回调函数，会暂停 MessageBox 的关闭</td><td><code>(action: MessageBoxAction,instance:MessageBoxOptions,done:()=&gt;void) =&gt; void</code></td><td>--</td></tr><tr><td>show-confirm-button</td><td>是否显示确认按钮</td><td><code>boolean</code></td><td>true</td></tr><tr><td>show-cancel-button</td><td>是否显示取消按钮</td><td><code>boolean</code></td><td>false</td></tr><tr><td>confirm-button-text</td><td>确认按钮的文字</td><td><code>string</code></td><td>OK</td></tr><tr><td>cancel-button-text</td><td>取消按钮的文字</td><td><code>string</code></td><td>Cancel</td></tr><tr><td>confirm-button-type</td><td>确认按钮的类型</td><td><code>string</code></td><td>primary</td></tr><tr><td>cancel-button-type</td><td>取消按钮的类型</td><td><code>string</code></td><td>--</td></tr><tr><td>confirm-button-disabled</td><td>是否禁用确认按钮</td><td><code>boolean</code></td><td>false</td></tr><tr><td>confirm-button-loading</td><td>是否显示确认按钮的加载状态</td><td><code>boolean</code></td><td>false</td></tr><tr><td>cancel-button-disabled</td><td>是否禁用取消按钮</td><td><code>boolean</code></td><td>false</td></tr><tr><td>cancel-button-loading</td><td>是否显示取消按钮的加载状态</td><td><code>boolean</code></td><td>false</td></tr><tr><td>close-on-click-modal</td><td>点击遮罩是否允许关闭</td><td><code>boolean</code></td><td>true</td></tr><tr><td>show-input</td><td>是否显示输入框</td><td><code>boolean</code></td><td>false</td></tr><tr><td>input-placeholder</td><td>输入框的提示文字</td><td><code>string</code></td><td>Place input...</td></tr><tr><td>input-type</td><td>输入框的类型</td><td><code>string</code></td><td>text</td></tr><tr><td>input-value</td><td>输入框的初始值</td><td><code>string</code></td><td>&#39;&#39;</td></tr><tr><td>center</td><td>是否居中显示</td><td><code>boolean</code></td><td>false</td></tr><tr><td>round-button</td><td>是否显示圆角按钮</td><td><code>boolean</code></td><td>false</td></tr><tr><td>button-size</td><td>按钮大小，可选值为 default、large 、small</td><td><code>string</code></td><td>default</td></tr></tbody></table>',30),c=[s];function r(i,n,l,p,h,g){return e(),d("div",null,c)}const u=t(a,[["render",r]]);export{m as __pageData,u as default};
